# -*- coding: utf-8 -*-
"""sampleapp

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1emjZlnPVNKc8t3UOgSyElZLL95ip21zm
"""

import numpy as np
import pickle
import pandas as pd
import seaborn as sns
#from flasgger import Swagger
import streamlit as st 
from sklearn.neighbors import KNeighborsClassifier
from PIL import Image
import plotly.express as px
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

label_encoder = LabelEncoder()


pickle_in = open("mdl.pkl","rb")
classifier=pickle.load(pickle_in)
def welcome():
    return "Welcome All"


def predict_churn(tenure,PhoneService,Contract,PaperlessBilling,PaymentMethod,MonthlyCharges,TotalCharges,gender,SeniorCitizen,Partner,Dependents,MultipleLines,InternetService,OnlineSecurity,OnlineBackup,DeviceProtection,TechSupport,StreamingTV,StreamingMovies):
    prediction=classifier.predict([[tenure,PhoneService,Contract,PaperlessBilling,PaymentMethod,MonthlyCharges,TotalCharges,gender,SeniorCitizen,Partner,Dependents,MultipleLines,InternetService,OnlineSecurity,OnlineBackup,DeviceProtection,TechSupport,StreamingTV,StreamingMovies]])
    print(prediction)
    return prediction
    
def main():
  st.title("Telecom customer churn prediction")
  html_temp = """
    <div style="background-color: #006400;padding:10px">
    <h2 style="color:white;text-align:center;"> customer churn prediction.</h2>
    </div>
    """
  
  

  st.markdown(html_temp,unsafe_allow_html=True)
  display = ("Male","Female")
  options = list(range(len(display)))
  value = st.selectbox("Gender", options, format_func=lambda x: display[x])
  gender=value
  
  display = ("0","1")
  options = list(range(len(display)))
  value = st.selectbox("SeniorCitizen", options, format_func=lambda x: display[x])
  SeniorCitizen=value
  
  display = ("Yes","No")
  options = list(range(len(display)))
  value = st.selectbox("Partner", options, format_func=lambda x: display[x])
  Partner=value

  display = ("Yes","No")
  options = list(range(len(display)))
  value = st.selectbox("Dependents", options, format_func=lambda x: display[x])
  Dependents=value
    
  tenure = st.text_input("Enter tenure","Type Here")

  display = ("Yes", "No")
  options = list(range(len(display)))
  value = st.selectbox("Phone service", options, format_func=lambda x: display[x])
  PhoneService=value

  display = ("Yes","No")
  options = list(range(len(display)))
  value = st.selectbox("Multiple lines", options, format_func=lambda x: display[x])
  MultipleLines=value

  display = ("DSL","FIBER OPTIC","No")
  options = list(range(len(display)))
  value = st.selectbox("Type of internet service", options, format_func=lambda x: display[x])
  InternetService=value

  display = ("Yes","No")
  options = list(range(len(display)))
  value = st.selectbox("Online Security", options, format_func=lambda x: display[x])
  OnlineSecurity=value

  display = ("Yes","No")
  options = list(range(len(display)))
  value = st.selectbox("Online Backup", options, format_func=lambda x: display[x])
  OnlineBackup=value

  display = ("Yes","No")
  options = list(range(len(display)))
  value = st.selectbox("Device protection", options, format_func=lambda x: display[x])
  DeviceProtection=value

  display = ("Yes","No")
  options = list(range(len(display)))
  value = st.selectbox("Tech support", options, format_func=lambda x: display[x])
  TechSupport=value

  display = ("Yes","No")
  options = list(range(len(display)))
  value = st.selectbox("Streaming tv", options, format_func=lambda x: display[x])
  StreamingTV=value

  display = ("Yes","No")
  options = list(range(len(display)))
  value = st.selectbox("Streaming movies", options, format_func=lambda x: display[x])
  StreamingMovies=value

  display = ("Month-to-Month", "One year","Two year")
  options = list(range(len(display)))
  value = st.selectbox("Contract type", options, format_func=lambda x: display[x])
  Contract=value

  display = ("Yes", "No")
  options = list(range(len(display)))
  value = st.selectbox("Type of billing?", options, format_func=lambda x: display[x])
  PaperlessBilling=value

  display = ("Bank transfer (automatic)", "Credit card (automatic)","Electronic check","Mailed check")
  options = list(range(len(display)))
  value = st.selectbox("Mode of payment?", options, format_func=lambda x: display[x])
  PaymentMethod=value
    
  MonthlyCharges = st.text_input("Monthly charges","Type Here")
    
  TotalCharges = st.text_input("Total charges","Type Here")

  result=""
  if st.button("Predict"):   
    tenure=float(tenure)
    PhoneService=float(PhoneService)
    Contract=float(Contract)
    PaperlessBilling=float(PaperlessBilling)
    PaymentMethod=float(PaymentMethod)
    MonthlyCharges=float(MonthlyCharges)
    TotalCharges=float(TotalCharges)
    gender=float(gender)
    SeniorCitizen=float(SeniorCitizen)
    Partner=float(Partner)
    Dependents=float(Dependents)
    MultipleLines=float(MultipleLines)
    InternetService=float(InternetService)
    OnlineSecurity=float(OnlineSecurity)
    OnlineBackup=float(OnlineBackup)
    DeviceProtection=float(DeviceProtection)
    TechSupport=float(TechSupport)
    StreamingTV=float(StreamingTV)
    StreamingMovies=float(StreamingMovies)
    
    result=predict_churn(tenure,PhoneService,Contract,PaperlessBilling,PaymentMethod,MonthlyCharges,TotalCharges,gender,SeniorCitizen,Partner,Dependents,MultipleLines,InternetService,OnlineSecurity,OnlineBackup,DeviceProtection,TechSupport,StreamingTV,StreamingMovies)
  st.success('The status is {}'.format(result))
  if st.button("About"):
    st.text("Lets LEarn")
    st.text("Built with Streamlit")

if __name__=='__main__':
    main()

